{"ast":null,"code":"import _slicedToArray from \"/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/src/component/TodoInput.js\";\nimport React, { useState, useContext, useCallback } from 'react';\nimport TodosContext from \"../context/TodosContext\";\n\nconst TodoInput = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputValue = _useState2[0],\n        setInputValue = _useState2[1];\n\n  const _useContext = useContext(TodosContext),\n        state = _useContext.state,\n        action = _useContext.action;\n\n  const genId = useCallback(() => {\n    return state.todos.length ? Math.max(...state.todos.map(todo => todo.id)) + 1 : 1;\n  }, [state.todos]);\n  const onChangeInput = useCallback(e => {\n    setInputValue(e.target.value);\n  }, []);\n  const onSubmitForm = useCallback(e => {\n    e.preventDefault();\n    if (!inputValue.trim()) return;\n    action.setTodos([...state.todos, {\n      id: genId(),\n      content: inputValue,\n      completed: false\n    }]);\n    setInputValue('');\n  }, [action, state.todos]);\n  return React.createElement(\"form\", {\n    onSubmit: onSubmitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"input-todo\",\n    placeholder: \"What needs to be done?\",\n    value: inputValue,\n    onChange: onChangeInput,\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nexport default TodoInput;","map":{"version":3,"sources":["/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/src/component/TodoInput.js"],"names":["React","useState","useContext","useCallback","TodosContext","TodoInput","inputValue","setInputValue","state","action","genId","todos","length","Math","max","map","todo","id","onChangeInput","e","target","value","onSubmitForm","preventDefault","trim","setTodos","content","completed"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACgBJ,QAAQ,CAAE,EAAF,CADxB;AAAA;AAAA,QACdK,UADc;AAAA,QACFC,aADE;;AAAA,sBAEIL,UAAU,CAAEE,YAAF,CAFd;AAAA,QAEdI,KAFc,eAEdA,KAFc;AAAA,QAEPC,MAFO,eAEPA,MAFO;;AAItB,QAAMC,KAAK,GAAGP,WAAW,CAAC,MAAM;AAC9B,WAAOK,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqBC,IAAI,CAACC,GAAL,CAAU,GAAGN,KAAK,CAACG,KAAN,CAAYI,GAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAA9B,CAAb,IAAoD,CAAzE,GAA6E,CAApF;AACD,GAFwB,EAEtB,CAAET,KAAK,CAACG,KAAR,CAFsB,CAAzB;AAIA,QAAMO,aAAa,GAAGf,WAAW,CAACgB,CAAC,IAAI;AACrCZ,IAAAA,aAAa,CAAEY,CAAC,CAACC,MAAF,CAASC,KAAX,CAAb;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIA,QAAMC,YAAY,GAAGnB,WAAW,CAACgB,CAAC,IAAI;AACpCA,IAAAA,CAAC,CAACI,cAAF;AACA,QAAK,CAACjB,UAAU,CAACkB,IAAX,EAAN,EAA0B;AAC1Bf,IAAAA,MAAM,CAACgB,QAAP,CAAiB,CACf,GAAGjB,KAAK,CAACG,KADM,EAEf;AAAEM,MAAAA,EAAE,EAAEP,KAAK,EAAX;AAAegB,MAAAA,OAAO,EAAEpB,UAAxB;AAAoCqB,MAAAA,SAAS,EAAE;AAA/C,KAFe,CAAjB;AAIApB,IAAAA,aAAa,CAAE,EAAF,CAAb;AACD,GAR+B,EAQ7B,CAAEE,MAAF,EAAUD,KAAK,CAACG,KAAhB,CAR6B,CAAhC;AAUA,SACE;AAAM,IAAA,QAAQ,EAAGW,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,WAAW,EAAC,wBAFd;AAGE,IAAA,KAAK,EAAGhB,UAHV;AAIE,IAAA,QAAQ,EAAGY,aAJb;AAKE,IAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAWD,CAjCD;;AAmCA,eAAeb,SAAf","sourcesContent":["import React, { useState, useContext, useCallback } from 'react';\nimport TodosContext from \"../context/TodosContext\";\n\nconst TodoInput = () => {\n  const [ inputValue, setInputValue ] = useState( '' );\n  const { state, action } = useContext( TodosContext );\n\n  const genId = useCallback(() => {\n    return state.todos.length ? Math.max( ...state.todos.map( todo => todo.id ) ) + 1 : 1;\n  }, [ state.todos ]);\n\n  const onChangeInput = useCallback(e => {\n    setInputValue( e.target.value );\n  }, []);\n\n  const onSubmitForm = useCallback(e => {\n    e.preventDefault();\n    if ( !inputValue.trim() ) return;\n    action.setTodos( [\n      ...state.todos,\n      { id: genId(), content: inputValue, completed: false }\n    ] );\n    setInputValue( '' );\n  }, [ action, state.todos ] );\n\n  return (\n    <form onSubmit={ onSubmitForm }>\n      <input\n        className=\"input-todo\"\n        placeholder=\"What needs to be done?\"\n        value={ inputValue }\n        onChange={ onChangeInput }\n        autoFocus\n      />\n    </form>\n  );\n};\n\nexport default TodoInput;"]},"metadata":{},"sourceType":"module"}