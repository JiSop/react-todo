{"ast":null,"code":"import _slicedToArray from \"/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/src/component/TodoInput.js\";\nimport React, { useState, useContext, useCallback, useRef } from 'react';\nimport TodosContext from \"../context/TodosContext\";\n\nconst TodoInput = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputValue = _useState2[0],\n        setInputValue = _useState2[1];\n\n  const _useContext = useContext(TodosContext),\n        action = _useContext.action;\n\n  const nextId = useRef(0); // const genId = useCallback( () => {\n  //   return state.todos.length ? Math.max( ...state.todos.map( todo => todo.id ) ) + 1 : 1;\n  // }, [ state.todos ] );\n\n  const onChangeInput = useCallback(e => {\n    setInputValue(e.target.value);\n  }, []);\n  const onInsert = useCallback(content => {\n    const todo = {\n      id: nextId.current,\n      content,\n      complete: false\n    };\n    action.setTodos(todos => todos.concat(todo));\n    nextId.current += 1; // action.setTodos( [\n    //   ...state.todos,\n    //   { id: genId(), content: inputValue, completed: false }\n    // ] );\n  }, [action]);\n  const onSubmitForm = useCallback(e => {\n    e.preventDefault();\n    if (!inputValue.trim()) return;\n    onInsert(inputValue);\n    setInputValue('');\n  }, [inputValue, onInsert]);\n  return React.createElement(\"form\", {\n    onSubmit: onSubmitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"input-todo\",\n    placeholder: \"What needs to be done?\",\n    value: inputValue,\n    onChange: onChangeInput,\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default React.memo(TodoInput);","map":{"version":3,"sources":["/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/src/component/TodoInput.js"],"names":["React","useState","useContext","useCallback","useRef","TodosContext","TodoInput","inputValue","setInputValue","action","nextId","onChangeInput","e","target","value","onInsert","content","todo","id","current","complete","setTodos","todos","concat","onSubmitForm","preventDefault","trim","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,WAAtC,EAAmDC,MAAnD,QAAiE,OAAjE;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACgBL,QAAQ,CAAE,EAAF,CADxB;AAAA;AAAA,QACdM,UADc;AAAA,QACFC,aADE;;AAAA,sBAEHN,UAAU,CAAEG,YAAF,CAFP;AAAA,QAEdI,MAFc,eAEdA,MAFc;;AAGtB,QAAMC,MAAM,GAAGN,MAAM,CAAC,CAAD,CAArB,CAHsB,CAKtB;AACA;AACA;;AAEA,QAAMO,aAAa,GAAGR,WAAW,CAAES,CAAC,IAAI;AACtCJ,IAAAA,aAAa,CAAEI,CAAC,CAACC,MAAF,CAASC,KAAX,CAAb;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIA,QAAMC,QAAQ,GAAGZ,WAAW,CAAEa,OAAO,IAAI;AACvC,UAAMC,IAAI,GAAG;AACXC,MAAAA,EAAE,EAAER,MAAM,CAACS,OADA;AAEXH,MAAAA,OAFW;AAGXI,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKAX,IAAAA,MAAM,CAACY,QAAP,CAAiBC,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAcN,IAAd,CAA1B;AACAP,IAAAA,MAAM,CAACS,OAAP,IAAkB,CAAlB,CAPuC,CAQvC;AACA;AACA;AACA;AACC,GAZyB,EAYvB,CAAEV,MAAF,CAZuB,CAA5B;AAeA,QAAMe,YAAY,GAAGrB,WAAW,CAAES,CAAC,IAAI;AACrCA,IAAAA,CAAC,CAACa,cAAF;AACA,QAAK,CAAClB,UAAU,CAACmB,IAAX,EAAN,EAA0B;AAC1BX,IAAAA,QAAQ,CAAER,UAAF,CAAR;AACAC,IAAAA,aAAa,CAAE,EAAF,CAAb;AACD,GAL+B,EAK7B,CAAED,UAAF,EAAcQ,QAAd,CAL6B,CAAhC;AAOA,SACE;AAAM,IAAA,QAAQ,EAAGS,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,WAAW,EAAC,wBAFd;AAGE,IAAA,KAAK,EAAGjB,UAHV;AAIE,IAAA,QAAQ,EAAGI,aAJb;AAKE,IAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAWD,CA9CD;;AAgDA,eAAeX,KAAK,CAAC2B,IAAN,CAAYrB,SAAZ,CAAf","sourcesContent":["import React, { useState, useContext, useCallback, useRef } from 'react';\nimport TodosContext from \"../context/TodosContext\";\n\nconst TodoInput = () => {\n  const [ inputValue, setInputValue ] = useState( '' );\n  const { action } = useContext( TodosContext );\n  const nextId = useRef(0);\n\n  // const genId = useCallback( () => {\n  //   return state.todos.length ? Math.max( ...state.todos.map( todo => todo.id ) ) + 1 : 1;\n  // }, [ state.todos ] );\n\n  const onChangeInput = useCallback( e => {\n    setInputValue( e.target.value );\n  }, [] );\n\n  const onInsert = useCallback( content => {\n    const todo = {\n      id: nextId.current,\n      content,\n      complete: false\n    };\n    action.setTodos( todos => todos.concat( todo ) );\n    nextId.current += 1;\n    // action.setTodos( [\n    //   ...state.todos,\n    //   { id: genId(), content: inputValue, completed: false }\n    // ] );\n    }, [ action ]\n  );\n\n  const onSubmitForm = useCallback( e => {\n    e.preventDefault();\n    if ( !inputValue.trim() ) return;\n    onInsert( inputValue );\n    setInputValue( '' );\n  }, [ inputValue, onInsert ] );\n\n  return (\n    <form onSubmit={ onSubmitForm }>\n      <input\n        className=\"input-todo\"\n        placeholder=\"What needs to be done?\"\n        value={ inputValue }\n        onChange={ onChangeInput }\n        autoFocus\n      />\n    </form>\n  );\n};\n\nexport default React.memo( TodoInput );"]},"metadata":{},"sourceType":"module"}