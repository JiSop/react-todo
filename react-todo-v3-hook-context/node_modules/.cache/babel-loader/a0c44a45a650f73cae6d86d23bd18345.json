{"ast":null,"code":"import _slicedToArray from \"/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/src/component/TodoInput.js\";\nimport React, { useState, useContext, useCallback } from 'react';\nimport TodosContext from \"../context/TodosContext\";\n\nconst TodoInput = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        inputValue = _useState2[0],\n        setInputValue = _useState2[1];\n\n  const _useContext = useContext(TodosContext),\n        state = _useContext.state,\n        action = _useContext.action;\n\n  const genId = useCallback(() => {\n    return state.todos.length ? Math.max(...state.todos.map(todo => todo.id)) + 1 : 1;\n  }, [state.todos]);\n  const onChangeInput = useCallback(e => {\n    setInputValue(e.target.value);\n  }, []);\n  const onSubmitForm = useCallback(e => {\n    e.preventDefault();\n    if (!inputValue.trim()) return;\n    const todo = {\n      id: genId(),\n      content: inputValue,\n      complete: false\n    };\n    action.setTodos(todos => todos.concat(todo)); // action.setTodos( [\n    //   ...state.todos,\n    //   { id: genId(), content: inputValue, completed: false }\n    // ] );\n\n    setInputValue('');\n  }, [action, genId, inputValue]);\n  return React.createElement(\"form\", {\n    onSubmit: onSubmitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"input-todo\",\n    placeholder: \"What needs to be done?\",\n    value: inputValue,\n    onChange: onChangeInput,\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nexport default React.memo(TodoInput);","map":{"version":3,"sources":["/Users/j.mac/Documents/dev/reactLearn/react_todo/react_todo_v3_hook/src/component/TodoInput.js"],"names":["React","useState","useContext","useCallback","TodosContext","TodoInput","inputValue","setInputValue","state","action","genId","todos","length","Math","max","map","todo","id","onChangeInput","e","target","value","onSubmitForm","preventDefault","trim","content","complete","setTodos","concat","memo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACgBJ,QAAQ,CAAE,EAAF,CADxB;AAAA;AAAA,QACdK,UADc;AAAA,QACFC,aADE;;AAAA,sBAEIL,UAAU,CAAEE,YAAF,CAFd;AAAA,QAEdI,KAFc,eAEdA,KAFc;AAAA,QAEPC,MAFO,eAEPA,MAFO;;AAItB,QAAMC,KAAK,GAAGP,WAAW,CAAE,MAAM;AAC/B,WAAOK,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqBC,IAAI,CAACC,GAAL,CAAU,GAAGN,KAAK,CAACG,KAAN,CAAYI,GAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAA9B,CAAb,IAAoD,CAAzE,GAA6E,CAApF;AACD,GAFwB,EAEtB,CAAET,KAAK,CAACG,KAAR,CAFsB,CAAzB;AAIA,QAAMO,aAAa,GAAGf,WAAW,CAAEgB,CAAC,IAAI;AACtCZ,IAAAA,aAAa,CAAEY,CAAC,CAACC,MAAF,CAASC,KAAX,CAAb;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIA,QAAMC,YAAY,GAAGnB,WAAW,CAAEgB,CAAC,IAAI;AACrCA,IAAAA,CAAC,CAACI,cAAF;AACA,QAAK,CAACjB,UAAU,CAACkB,IAAX,EAAN,EAA0B;AAC1B,UAAMR,IAAI,GAAG;AACXC,MAAAA,EAAE,EAAEP,KAAK,EADE;AAEXe,MAAAA,OAAO,EAAEnB,UAFE;AAGXoB,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKAjB,IAAAA,MAAM,CAACkB,QAAP,CAAiBhB,KAAK,IAAIA,KAAK,CAACiB,MAAN,CAAcZ,IAAd,CAA1B,EARqC,CASrC;AACA;AACA;AACA;;AACAT,IAAAA,aAAa,CAAE,EAAF,CAAb;AACD,GAd+B,EAc7B,CAAEE,MAAF,EAAUC,KAAV,EAAiBJ,UAAjB,CAd6B,CAAhC;AAgBA,SACE;AAAM,IAAA,QAAQ,EAAGgB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,WAAW,EAAC,wBAFd;AAGE,IAAA,KAAK,EAAGhB,UAHV;AAIE,IAAA,QAAQ,EAAGY,aAJb;AAKE,IAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAWD,CAvCD;;AAyCA,eAAelB,KAAK,CAAC6B,IAAN,CAAYxB,SAAZ,CAAf","sourcesContent":["import React, { useState, useContext, useCallback } from 'react';\nimport TodosContext from \"../context/TodosContext\";\n\nconst TodoInput = () => {\n  const [ inputValue, setInputValue ] = useState( '' );\n  const { state, action } = useContext( TodosContext );\n\n  const genId = useCallback( () => {\n    return state.todos.length ? Math.max( ...state.todos.map( todo => todo.id ) ) + 1 : 1;\n  }, [ state.todos ] );\n\n  const onChangeInput = useCallback( e => {\n    setInputValue( e.target.value );\n  }, [] );\n\n  const onSubmitForm = useCallback( e => {\n    e.preventDefault();\n    if ( !inputValue.trim() ) return;\n    const todo = {\n      id: genId(),\n      content: inputValue,\n      complete: false\n    };\n    action.setTodos( todos => todos.concat( todo ) );\n    // action.setTodos( [\n    //   ...state.todos,\n    //   { id: genId(), content: inputValue, completed: false }\n    // ] );\n    setInputValue( '' );\n  }, [ action, genId, inputValue ] );\n\n  return (\n    <form onSubmit={ onSubmitForm }>\n      <input\n        className=\"input-todo\"\n        placeholder=\"What needs to be done?\"\n        value={ inputValue }\n        onChange={ onChangeInput }\n        autoFocus\n      />\n    </form>\n  );\n};\n\nexport default React.memo( TodoInput );"]},"metadata":{},"sourceType":"module"}